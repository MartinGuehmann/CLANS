package clans;

public class WindowRotatationAnimantionSetup extends javax.swing.JFrame {
    

    /**
     * 
     */
    private static final long serialVersionUID = -4229599705833513486L;
    
    
    public WindowRotatationAnimantionSetup(ClusteringWithGui parent) {
        this.parent=parent;
        this.setTitle("Rotation");
        initComponents();
        repaint();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        settingpanel = new javax.swing.JPanel();
        xlabel = new javax.swing.JLabel();
        xtextfield = new javax.swing.JTextField();
        ylabel = new javax.swing.JLabel();
        ytextfield = new javax.swing.JTextField();
        timelabel = new javax.swing.JLabel();
        timetextfield = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        continuouscheckbox = new javax.swing.JCheckBox();
        repaintbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        settingpanel.setLayout(new java.awt.GridLayout(0, 2));

        xlabel.setText("X");
        settingpanel.add(xlabel);

        xtextfield.setText("0");
        xtextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xtextfieldActionPerformed(evt);
            }
        });

        settingpanel.add(xtextfield);

        ylabel.setText("Y");
        settingpanel.add(ylabel);

        ytextfield.setText("0");
        ytextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ytextfieldActionPerformed(evt);
            }
        });

        settingpanel.add(ytextfield);

        timelabel.setText("Time (min. ms)");
        settingpanel.add(timelabel);

        timetextfield.setText("100");
        timetextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timetextfieldActionPerformed(evt);
            }
        });

        settingpanel.add(timetextfield);

        getContentPane().add(settingpanel, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(0, 1));

        continuouscheckbox.setText("continuous rotate");
        jPanel1.add(continuouscheckbox);

        repaintbutton.setText("Rotate");
        repaintbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repaintbuttonActionPerformed(evt);
            }
        });

        jPanel1.add(repaintbutton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //stop the thread before closing
        stop=true;
    }//GEN-LAST:event_formWindowClosing

    private void timetextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timetextfieldActionPerformed
        try{
            minms=Long.parseLong(timetextfield.getText().trim());
        }catch (NumberFormatException ne){
            javax.swing.JOptionPane.showMessageDialog(this,"ERROR, unable to parse float from "+timetextfield.getText());
        }
    }//GEN-LAST:event_timetextfieldActionPerformed

    private void ytextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ytextfieldActionPerformed
        try{
            yrot=Float.parseFloat(ytextfield.getText().trim());
            yrot*=2*java.lang.Math.PI/360;
        }catch (NumberFormatException ne){
            javax.swing.JOptionPane.showMessageDialog(this,"ERROR, unable to parse float from "+ytextfield.getText());
        }
    }//GEN-LAST:event_ytextfieldActionPerformed

    private void xtextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xtextfieldActionPerformed
        try{
            xrot=Float.parseFloat(xtextfield.getText().trim());
            xrot*=2*java.lang.Math.PI/360;
        }catch (NumberFormatException ne){
            javax.swing.JOptionPane.showMessageDialog(this,"ERROR, unable to parse float from "+xtextfield.getText());
        }
    }//GEN-LAST:event_xtextfieldActionPerformed
    
    private void repaintbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repaintbuttonActionPerformed
        try{
            yrot=Float.parseFloat(ytextfield.getText().trim());
            yrot*=2*java.lang.Math.PI/360;
        }catch (NumberFormatException ne){
            javax.swing.JOptionPane.showMessageDialog(this,"ERROR, unable to parse float from "+ytextfield.getText());
            return;
        }
        try{
            xrot=Float.parseFloat(xtextfield.getText().trim());
            xrot*=2*java.lang.Math.PI/360;
        }catch (NumberFormatException ne){
            javax.swing.JOptionPane.showMessageDialog(this,"ERROR, unable to parse float from "+xtextfield.getText());
            return;
        }
        if(stop==false){//if I am rotating this thing already
            synchronized(myrotatethread){
                stop=true;
                repaintbutton.setText("Stopping");
                repaintbutton.setEnabled(false);
            }
            //the thread re-enables the button when it's done stopping
        }else{
            // get the values and rotate accordingly
            int check=getvals();
            //now update the rotations to parent and redraw
            if(check!=-1){//-1 would be error
                if(continuouscheckbox.isSelected()){
                    stop=false;
                    repaintbutton.setText("Stop");
                }else{
                    stop=true;
                }
                myrotatethread=new rotatethread();
                myrotatethread.start();
            }
        }
    }//GEN-LAST:event_repaintbuttonActionPerformed
        
    ClusteringWithGui parent=null;
    float xrot=0;
    float yrot=0;
    long minms=0;
    String tmpstr="";
    boolean stop=true;
    rotatethread myrotatethread;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox continuouscheckbox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton repaintbutton;
    private javax.swing.JPanel settingpanel;
    private javax.swing.JLabel timelabel;
    private javax.swing.JTextField timetextfield;
    private javax.swing.JLabel xlabel;
    private javax.swing.JTextField xtextfield;
    private javax.swing.JLabel ylabel;
    private javax.swing.JTextField ytextfield;
    // End of variables declaration//GEN-END:variables
    
    int getvals(){
        try{
            tmpstr=xtextfield.getText().trim();
            xrot=Float.parseFloat(tmpstr);
            xrot*=2*java.lang.Math.PI/360;//in radians
            tmpstr=ytextfield.getText().trim();
            yrot=Float.parseFloat(tmpstr);
            yrot*=2*java.lang.Math.PI/360;//in radians
            tmpstr=timetextfield.getText();
            minms=Long.parseLong(tmpstr);
        }catch (NumberFormatException ne){
            javax.swing.JOptionPane.showMessageDialog(parent,"Unable to parse number from '"+tmpstr+"'");
            return -1;
        }
        return 0;
    }//end getvals
    
    //--------------------------------------------------------------------------
    
    class rotatethread extends java.lang.Thread{
        
        public rotatethread(){
            //stop=false;
        }
        
        //boolean stop=false;
        long lasttime=0;
        long currtime=0;
         
        @Override
        public void run(){
            int round=0;
            while(round==0 || stop==false){
                round=1;
                currtime=System.currentTimeMillis()-lasttime;
                if(currtime<minms){
                    try{
                        Thread.sleep(minms - currtime);
                    }catch (java.lang.InterruptedException ie){
                        ie.printStackTrace();
                    }
                }
                parent.mousemove[0]=(int)(((double)xrot*(parent.draw_area.drawwidth/2))/(java.lang.Math.PI/2));
                parent.mousemove[1]=(int)(((double)yrot*(parent.draw_area.drawwidth/2))/(java.lang.Math.PI/2));
                parent.repaint();
                lasttime=System.currentTimeMillis();
                //parent.draw1.rotmtx[0][0]=parent.draw1.myrotmtx[0][0];
                //parent.draw1.rotmtx[0][1]=parent.draw1.myrotmtx[0][1];
                //parent.draw1.rotmtx[0][2]=parent.draw1.myrotmtx[0][2];
                //parent.draw1.rotmtx[1][0]=parent.draw1.myrotmtx[1][0];
                //parent.draw1.rotmtx[1][1]=parent.draw1.myrotmtx[1][1];
                //parent.draw1.rotmtx[1][2]=parent.draw1.myrotmtx[1][2];
                //parent.draw1.rotmtx[2][0]=parent.draw1.myrotmtx[2][0];
                //parent.draw1.rotmtx[2][1]=parent.draw1.myrotmtx[2][1];
                //parent.draw1.rotmtx[2][2]=parent.draw1.myrotmtx[2][2];
                parent.data.rotmtx[0][0]=parent.data.myrotmtx[0][0];
                parent.data.rotmtx[0][1]=parent.data.myrotmtx[0][1];
                parent.data.rotmtx[0][2]=parent.data.myrotmtx[0][2];
                parent.data.rotmtx[1][0]=parent.data.myrotmtx[1][0];
                parent.data.rotmtx[1][1]=parent.data.myrotmtx[1][1];
                parent.data.rotmtx[1][2]=parent.data.myrotmtx[1][2];
                parent.data.rotmtx[2][0]=parent.data.myrotmtx[2][0];
                parent.data.rotmtx[2][1]=parent.data.myrotmtx[2][1];
                parent.data.rotmtx[2][2]=parent.data.myrotmtx[2][2];
                parent.draw_area.tmprotmtx=new double[3][3];                
            }//end while
            synchronized(this){
                repaintbutton.setText("Rotate");
                repaintbutton.setEnabled(true);
            }
        }//end run
        
    }//end class rotatethread
    
}
