package clans;

import java.util.*;

public class showblasthitsforselected extends javax.swing.JFrame {

    /**
     * 
     */
    private static final long serialVersionUID = 3816742984172803053L;
    
    public showblasthitsforselected(ClusteringWithGui parent, int[] blasthits,int[] selectednames) {
        this.parent=parent;
        this.blasthits=blasthits;
        this.selectednames=selectednames;
        makedata();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        seqnamelist = new javax.swing.JList(namesarr);
        jScrollPane1 = new javax.swing.JScrollPane();
        blasthitlist = new javax.swing.JList(blastnamesarr);
        buttonpanel = new javax.swing.JPanel();
        okbutton = new javax.swing.JButton();
        clearbutton = new javax.swing.JButton();
        makeblasthitsselected = new javax.swing.JButton();
        searchbutton = new javax.swing.JButton();
        closebutton = new javax.swing.JButton();

        setTitle("Selected sequences and their blast hits");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setPreferredSize(new java.awt.Dimension(400, 200));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 200));
        seqnamelist.setFont(new java.awt.Font("Monospaced", 0, 10));
        jScrollPane2.setViewportView(seqnamelist);

        jPanel2.add(jScrollPane2);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 200));
        blasthitlist.setFont(new java.awt.Font("Monospaced", 0, 10));
        jScrollPane1.setViewportView(blasthitlist);

        jPanel2.add(jScrollPane1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        buttonpanel.setLayout(new java.awt.GridLayout());

        buttonpanel.setPreferredSize(new java.awt.Dimension(0, 35));
        okbutton.setText("OK");
        okbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okbuttonActionPerformed(evt);
            }
        });

        buttonpanel.add(okbutton);

        clearbutton.setText("Clear");
        clearbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbuttonActionPerformed(evt);
            }
        });

        buttonpanel.add(clearbutton);

        makeblasthitsselected.setText("Set as selected");
        makeblasthitsselected.setToolTipText("set the sequences selected in both lists as selected sequences in the graph");
        makeblasthitsselected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeblasthitsselectedActionPerformed(evt);
            }
        });

        buttonpanel.add(makeblasthitsselected);

        searchbutton.setText("Search");
        searchbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbuttonActionPerformed(evt);
            }
        });

        buttonpanel.add(searchbutton);

        closebutton.setText("Close");
        closebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebuttonActionPerformed(evt);
            }
        });

        buttonpanel.add(closebutton);

        getContentPane().add(buttonpanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void makeblasthitsselectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeblasthitsselectedActionPerformed
        // get the sequence numbers form both lists and set these as selected sequences in the graph
        int[] selectedseqs=seqnamelist.getSelectedIndices();
        int[] blastselectedseqs=blasthitlist.getSelectedIndices();
        int selectnum=selectedseqs.length;
        int selectblastnum=blastselectedseqs.length;
        int[] retarr=new int[selectnum+selectblastnum];
        for(int i=0;i<selectnum;i++){
            retarr[i]=selectednames[selectedseqs[i]];
        }//end for i
        for(int i=0;i<selectblastnum;i++){
            retarr[i+selectnum]=blasthits[blastselectedseqs[i]];
        }//end for i
        parent.data.selectedSequencesIndices=retarr;
        parent.blastselectseqs=new int[0];
        parent.repaint();
    }//GEN-LAST:event_makeblasthitsselectedActionPerformed

    private void clearbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbuttonActionPerformed
        // clear the selections
        blasthitlist.setSelectedIndices(new int[0]);
        seqnamelist.setSelectedIndices(new int[0]);
        repaint();
    }//GEN-LAST:event_clearbuttonActionPerformed
    
    private void closebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebuttonActionPerformed
        parent.blastselectseqs=new int[0];
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closebuttonActionPerformed
    
    private void searchbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbuttonActionPerformed
        // Add your handling code here:
        String query=getquery();
        int[] selectedseqs=getmatches(query,namesarr);
        int[] blastselectedseqs=getmatches(query,blastnamesarr);
        if ((blastselectedseqs.length == 0) || (selectedseqs.length == 0)) {
            javax.swing.JOptionPane.showMessageDialog(this,"No sequences found for '"+query+"'","ERROR",javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        seqnamelist.setSelectedIndices(selectedseqs);
        blasthitlist.setSelectedIndices(blastselectedseqs);
        repaint();
    }//GEN-LAST:event_searchbuttonActionPerformed
    
    private void okbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okbuttonActionPerformed
        int[] selectedseqs=seqnamelist.getSelectedIndices();
        int[] blastselectedseqs=blasthitlist.getSelectedIndices();
        int selectnum=selectedseqs.length;
        if(selectnum>0){
            int[] tmparr=new int[selectnum];
            for(int i=0;i<selectnum;i++){
                tmparr[i]=selectednames[selectedseqs[i]];
            }//end for i
            parent.data.selectedSequencesIndices=tmparr;
        }else{
            parent.data.selectedSequencesIndices=selectednames;
        }
        selectnum=blastselectedseqs.length;
        if(selectnum>0){
            int[] tmparr=new int[selectnum];
            for(int i=0;i<selectnum;i++){
                tmparr[i]=blasthits[blastselectedseqs[i]];
            }//end for i
            parent.blastselectseqs=tmparr;
        }else{
            parent.blastselectseqs=blasthits;
        }
        parent.repaint();
    }//GEN-LAST:event_okbuttonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        parent.blastselectseqs=new int[0];
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    String[] namesarr;
    String[] blastnamesarr;
    ClusteringWithGui parent;
    boolean showall=true;
    int[] selectednames;
    int[] globalselected=new int[0];
    int[] blasthits;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList blasthitlist;
    private javax.swing.JPanel buttonpanel;
    private javax.swing.JButton clearbutton;
    private javax.swing.JButton closebutton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton makeblasthitsselected;
    private javax.swing.JButton okbutton;
    private javax.swing.JButton searchbutton;
    public javax.swing.JList seqnamelist;
    // End of variables declaration//GEN-END:variables
    
    void makedata(){
        //initialize all the necessary data objects (namesarr & blastnamesarr)
        int tmpnum=selectednames.length;
        namesarr=new String[tmpnum];
        for(int i=0;i<tmpnum;i++){
            namesarr[i]=selectednames[i]+" "+parent.data.sequence_names[selectednames[i]];
        }
        tmpnum=blasthits.length;
        blastnamesarr=new String[tmpnum];
        for(int i=0;i<tmpnum;i++){
            blastnamesarr[i]=blasthits[i]+" "+parent.data.sequence_names[blasthits[i]];
        }//end for i
    }//end makedata
    
    //--------------------------------------------------------------------------
    
    String getquery(){
        //get the regexp query string
        String retstring="";
        retstring="(?i).*"+querydialog.getquery()+".*";
        return retstring;
    }//end getquery
    
    //--------------------------------------------------------------------------
    
    int[] getmatches(String query, String[] mynamesarr){
        //get the index of all names that match query
        int namesnum=mynamesarr.length;
        Vector<Integer> tmpvec = new Vector<Integer>();
        for(int i=0;i<namesnum;i++){
            if(mynamesarr[i].matches(query)){
                tmpvec.addElement(new Integer(i));
            }
        }//end for i
        
        int[] retarr=new int[tmpvec.size()];
        for(int i=0;i<tmpvec.size();i++){
            retarr[i]=((Integer)tmpvec.elementAt(i)).intValue();
        }
        return retarr;
    }//end getmatches
    
    //--------------------------------------------------------------------------
    /*
    String[] numberarr(String[] innames){
        int elements=innames.length;
        String[] retarr=new String[elements];
        int numlength=(String.valueOf(elements).length())+1;
        StringBuffer tmpstrbuff=new StringBuffer();
        for(int i=0;i<elements;i++){
            tmpstrbuff.setLength(0);
            tmpstrbuff.append(i);
            for(int j=tmpstrbuff.length();j<numlength;j++){
                tmpstrbuff.append(" ");
            }
            retarr[i]=tmpstrbuff+innames[i];
        }// end for i
        return retarr;
    }// end printnames
     
    //--------------------------------------------------------------------------
   /*
    void setselected(int[] selectednamesint){
        seqnamelist.setSelectedIndices(selectednamesint);
    }//end setselected
     
    void setselected(int[] selectednamesint, boolean showonly){
        seqnamelist.setSelectedIndices(selectednamesint);
        if(showonly){//if I only want to see the selected names
            selectednames=new String[selectednamesint.length];
            for(int i=0;i<selectednames.length;i++){
                selectednames[i]=namesarr[selectednamesint[i]];
            }//end for i
            seqnamelist.setListData(selectednames);
            seqnamelist.setSelectedIndices(new int[0]);
            showall=false;
            selectednamesbutton.setText("show all names");
        }
    }//end setselected
     */
    //--------------------------------------------------------------------------
    
    static int[] getblasthits(minattvals[] myattvals,int[] selectednames,String[] parentnamesarr){
        //get the names of the sequences with blast hits to or from selectednames (but not within)
        HashMap<String, Integer> selectedhash=new HashMap<String, Integer>();
        int selectnum=selectednames.length;
        for(int i=0;i<selectnum;i++){
            selectedhash.put(String.valueOf(selectednames[i]),null);
        }//end for i
        int attvalnum=myattvals.length;
        HashMap<String, Integer> addhash=new HashMap<String, Integer>();
        String qname,hname;
        for(int i=0;i<attvalnum;i++){
            qname=String.valueOf(myattvals[i].query);
            hname=String.valueOf(myattvals[i].hit);
            if(selectedhash.containsKey(qname)){
                if(selectedhash.containsKey(hname)==false){
                    if(addhash.containsKey(hname)==false){
                        addhash.put(hname,new Integer(myattvals[i].hit));
                    }
                }
            }else if(selectedhash.containsKey(hname)){
                if(addhash.containsKey(qname)==false){
                    addhash.put(qname,new Integer(myattvals[i].query));
                }
            }
        }//end for i
        Integer[] preretarr=(Integer[])addhash.values().toArray(new Integer[0]);
        int arrsize = preretarr.length;
        int[] retarr=new int[arrsize];
        for(int i=0;i<arrsize;i++){
            retarr[i]=preretarr[i].intValue();
        }//end for i
        java.util.Arrays.sort(retarr);
        return retarr;
    }//end getblasthits
    
}//end class
