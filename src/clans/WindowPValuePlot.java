package clans;

public class WindowPValuePlot extends javax.swing.JDialog {
    
    /**
     * 
     */
    private static final long serialVersionUID = 3001537593616478349L;

    public WindowPValuePlot(MinimalHsp[] vecarr, double maxval, boolean doscores) {
        this.vecarr=vecarr;
        this.maxval=maxval;//==minpval in clustertest
        this.doscores=doscores;
        draw1=new drawclass();
        initComponents();
        if(doscores){
            minlabel.setText("Min Score/Col");
            maxlabel.setText("Max Score/Col");
            draw1.vals=makescoredata();
        }else{
            draw1.vals=makedata();
        }
        mintextfield.setText(String.valueOf(minval));
        maxtextfield.setText(String.valueOf(maxval));
        repaint();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        drawpanel = new javax.swing.JPanel();
        buttonpanel = new javax.swing.JPanel();
        minlabel = new javax.swing.JLabel();
        mintextfield = new javax.swing.JTextField();
        maxlabel = new javax.swing.JLabel();
        maxtextfield = new javax.swing.JTextField();

        setTitle("P-value plot");
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        drawpanel.setLayout(new javax.swing.BoxLayout(drawpanel, javax.swing.BoxLayout.X_AXIS));

        drawpanel.setBackground(new java.awt.Color(255, 255, 255));
        drawpanel.setPreferredSize(new java.awt.Dimension(320, 240));
        drawpanel.add(draw1);
        drawpanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawpanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawpanelMouseReleased(evt);
            }
        });
        drawpanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawpanelMouseDragged(evt);
            }
        });

        getContentPane().add(drawpanel, java.awt.BorderLayout.CENTER);

        buttonpanel.setLayout(new java.awt.GridLayout(1, 0));

        minlabel.setText("min P-val");
        buttonpanel.add(minlabel);

        mintextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mintextfieldActionPerformed(evt);
            }
        });

        buttonpanel.add(mintextfield);

        maxlabel.setText("max P-val");
        buttonpanel.add(maxlabel);

        maxtextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxtextfieldActionPerformed(evt);
            }
        });

        buttonpanel.add(maxtextfield);

        getContentPane().add(buttonpanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents
    
    private void drawpanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawpanelMousePressed
        // Add your handling code here:
        mousex=evt.getX();
        drawmouse=true;
        repaint();
    }//GEN-LAST:event_drawpanelMousePressed
    
    private void drawpanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawpanelMouseDragged
        // Add your handling code here:
        mousex=evt.getX();
        drawmouse=true;
        repaint();
    }//GEN-LAST:event_drawpanelMouseDragged
    
    private void drawpanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawpanelMouseReleased
        // Add your handling code here:
        drawmouse=false;
        repaint();
    }//GEN-LAST:event_drawpanelMouseReleased
    
    private void maxtextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxtextfieldActionPerformed
        // Add your handling code here:
        try{
            maxval=Double.parseDouble(maxtextfield.getText());
            if(Double.isNaN(maxval)||Double.isInfinite(maxval)||(maxval==0)){
                System.err.println("Unable to parse double from "+maxtextfield.getText()+" value too small/large?");
                maxval=1;
            }
        }catch (NumberFormatException e){
            System.err.println("unable to parse double from "+maxtextfield.getText());
        }
        draw1.vals=makedata();
        repaint();
    }//GEN-LAST:event_maxtextfieldActionPerformed
    
    private void mintextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mintextfieldActionPerformed
        // Add your handling code here:
        try{
            minval=Double.parseDouble(mintextfield.getText());
            if(Double.isNaN(minval)||Double.isInfinite(minval)||(minval==0)){
                System.err.println("Unable to parse double from "+mintextfield.getText()+" value too small/large?");
                minval=1e-200;
            }
        }catch (NumberFormatException e){
            System.err.println("unable to parse double from "+mintextfield.getText());
        }
        draw1.vals=makedata();
        repaint();
    }//GEN-LAST:event_mintextfieldActionPerformed
    
    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        // Add your handling code here:
        repaint();
    }//GEN-LAST:event_formAncestorResized
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    
    MinimalHsp[] vecarr;
    double maxval=0;
    double minval=Double.MIN_VALUE;
    double ln10=java.lang.Math.log(10);
    drawclass draw1;
    boolean drawmouse=false;
    int mousex=0;
    boolean doscores=false;//am I in P-value or score mode?
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonpanel;
    private javax.swing.JPanel drawpanel;
    private javax.swing.JLabel maxlabel;
    private javax.swing.JTextField maxtextfield;
    private javax.swing.JLabel minlabel;
    private javax.swing.JTextField mintextfield;
    // End of variables declaration//GEN-END:variables
    
    /**
     * bin the score values present in attvals
     * 
     * @return
     */
    public float[] makescoredata() {
        int elements=100;//make 100 elements
        //now get the maximum and minimum values
        //I only want to use the best values in this case
        maxval=0;
        minval=Double.MAX_VALUE;
        for(int i=vecarr.length;--i>=0;){
            if(vecarr[i].val[0]>maxval){
                maxval=vecarr[i].val[0];
            }
            if(vecarr[i].val[0]<minval){
                minval=vecarr[i].val[0];
            }
        }//end for i
        //now I know the maximum and minimum values of my scores
        float[] retarr=new float[elements+1];
        //now see in what bins the values fall
        float stepsize=(float)((maxval-minval)/(float)elements);
        System.out.println("minval="+minval+" maxval="+maxval+" stepsize="+stepsize);
        for(int i=vecarr.length;--i>=0;){
            retarr[(int)((vecarr[i].val[0]-minval)/stepsize)]++;
        }//end for i
        for(int i=1;i<=elements;i++){
            retarr[i]+=retarr[i-1];
        }//end for i
        for(int i=0;i<=elements;i++){
            retarr[i]/=retarr[elements];
        }//end for i
        draw1.elements=elements;
        return retarr;
    }

    /**
     * bin the evalues present in attvals attvals are numbers from 0 to 1 int elements=100;
     * 
     * @return
     */
    public float[] makedata() {
        int elements=(int)((java.lang.Math.log(maxval)-java.lang.Math.log(minval))/ln10);//make an elements per power of 10
        if(elements==0){
            elements=1;
        }
        System.out.println("elements="+elements+" maxe="+maxval+" mine="+minval);
        int vecsize=vecarr.length;
        int k,index;
        int vecelem;
        double pval;
        float[] retarr=new float[elements+1];
        //float scale=(float)((float)elements/(java.lang.Math.log(maxval/minval)/ln10));
        float scale=1;
        for(int i=0;i<vecsize;i++){
            vecelem = vecarr[i].val.length;
            for(k=0;k<vecelem;k++){
                pval=vecarr[i].val[k];
                if(pval<=minval){
                    retarr[elements]++;
                }else if(pval<=maxval){
                    index=(int)((java.lang.Math.log(maxval)-java.lang.Math.log(pval))/ln10*scale);
                    retarr[index]++;
                }
            }//end for k
        }//end for i
        //now sum the elements
        float oldval=0;
        for(int i=0;i<elements+1;i++){
            retarr[i]+=oldval;
            oldval=retarr[i];
        }//end for i
        for(int i=0;i<elements+1;i++){
            retarr[i]=retarr[i]/retarr[elements];
        }//end for i
        draw1.elements=elements;
        return retarr;
    }//end makedata
    
    //--------------------------------------------------------------------------
    
    class drawclass extends javax.swing.JPanel{
        
        /**
         * 
         */
        private static final long serialVersionUID = 206366659024062602L;

        int xoffset=20;
        int yoffset=20;
        float[] vals=new float[0];//values ranging from 0 to 1
        int elements=0;//number of values in vals
        
        public void paintComponent(java.awt.Graphics g){
            super.paintComponent(g);
            int drawwidth=drawpanel.getWidth()-2*xoffset;
            int drawheight=drawpanel.getHeight()-2*yoffset;
            g.setColor(java.awt.Color.white);
            g.fillRect(0,0,drawpanel.getWidth(),drawpanel.getHeight());
            float linewidth= (float)drawwidth/(float)elements;
            g.setColor(java.awt.Color.red);
            int spacer=elements/10;
            if(doscores==false){
                g.drawString("Y-axis:# of hsp's above P-value; X-axis:log P-value",xoffset,15);
                float scale=1;
                double maxvallog=-(java.lang.Math.log(maxval)/ln10);
                g.drawString(String.valueOf(-(int)((0*scale)+maxvallog)),(int)((0*linewidth)),drawheight+yoffset+yoffset);
                for(int i=1;i<elements;i++){
                    g.drawLine((int)((i*linewidth)+xoffset), (int)(yoffset+drawheight-vals[i]*drawheight), (int)((i+1)*linewidth+xoffset), (int)(yoffset+drawheight-vals[i+1]*drawheight));
                    if(i%spacer==0){
                        g.drawLine((int)((i*linewidth)+xoffset), drawheight+yoffset, (int)((i*linewidth)+xoffset), drawheight+yoffset+5);
                        g.drawString(String.valueOf(-(int)((i*scale)+maxvallog)),(int)((i*linewidth)),drawheight+2*yoffset);
                    }
                }
                g.drawLine((int)((elements*linewidth)+xoffset), drawheight+yoffset, (int)((elements*linewidth)+xoffset), drawheight+yoffset+5);
                g.drawString(String.valueOf(-(int)((elements*scale)+maxvallog)),(int)((elements*linewidth)),drawheight+2*yoffset);
                if(drawmouse){
                    g.setColor(java.awt.Color.blue);
                    g.drawLine(mousex, yoffset,  mousex,  drawheight+yoffset);
                    float currelement=((mousex-xoffset)/linewidth);
                    g.drawString(String.valueOf((int)-((currelement*scale)+maxvallog)),xoffset,drawheight);
                }//end if drawmouse  
            }else{
                float scale=(float)(maxval-minval)/elements;
                g.drawString("Y-axis:# of hsp's above score; X-axis:score",xoffset,15);
                g.drawString(String.valueOf((int)((float)(int)(minval*1000)/1000)),(int)((0*linewidth)),drawheight+yoffset+yoffset);
                for(int i=1;i<elements;i++){
                    g.drawLine((int)((i*linewidth)+xoffset), (int)(yoffset+drawheight-vals[i]*drawheight), (int)((i+1)*linewidth+xoffset), (int)(yoffset+drawheight-vals[i+1]*drawheight));
                    if(i%spacer==0){
                        g.drawLine((int)((i*linewidth)+xoffset), drawheight+yoffset, (int)((i*linewidth)+xoffset), drawheight+yoffset+5);
                        g.drawString(String.valueOf((int)((float)(int)(((i*scale)+minval)*1000))/1000),(int)((i*linewidth)),drawheight+2*yoffset);
                    }
                }//end for i
                g.drawLine((int)((elements*linewidth)+xoffset), drawheight+yoffset, (int)((elements*linewidth)+xoffset), drawheight+yoffset+5);
                g.drawString(String.valueOf((int)((float)(int)(((elements*scale)+minval)*1000))/1000),(int)((elements*linewidth)),drawheight+2*yoffset);
                if(drawmouse){
                    g.setColor(java.awt.Color.blue);
                    g.drawLine(mousex, yoffset,  mousex,  drawheight+yoffset);
                    float currelement=((mousex-xoffset)/linewidth);
                    g.drawString(String.valueOf((currelement*scale)*(maxval-minval)+minval),xoffset,drawheight);
                }//end if drawmouse  
            }
            g.setColor(java.awt.Color.black);
            g.drawLine(xoffset, yoffset, xoffset, yoffset+drawheight);
            g.drawLine(xoffset, drawheight+yoffset, xoffset+drawwidth, drawheight+yoffset);
        }// end paintcomponent
        
    }//end drawclass
    
}//end class
