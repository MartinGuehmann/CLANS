/*
 * eplotdialog.java
 *
 * Created on July 7, 2003, 2:19 PM
 */
package clans;
//import java.util.*;
/**
 *
 * @author  tancred
 */
public class attplotdialog extends javax.swing.JDialog {
    
    /** Creates new form eplotdialog */
    public attplotdialog(minattvals[] attvals,double minpval) {
        this.attvals=attvals;
        draw1=new drawclass();
        initComponents();
        draw1.vals=makedata();
        maxtextfield.setText(String.valueOf(draw1.maxxval));
        this.setTitle("Attraction-value Plot :"+minpval);
        repaint();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        drawpanel = new javax.swing.JPanel();
        buttonpanel = new javax.swing.JPanel();
        minlabel = new javax.swing.JLabel();
        mintextfield = new javax.swing.JTextField();
        maxlabel = new javax.swing.JLabel();
        maxtextfield = new javax.swing.JTextField();

        setTitle("Attraction-value plot");
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        drawpanel.setLayout(new javax.swing.BoxLayout(drawpanel, javax.swing.BoxLayout.X_AXIS));

        drawpanel.setBackground(new java.awt.Color(255, 255, 255));
        drawpanel.setPreferredSize(new java.awt.Dimension(320, 240));
        drawpanel.add(draw1);
        drawpanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawpanelMouseDragged(evt);
            }
        });
        drawpanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawpanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawpanelMouseReleased(evt);
            }
        });

        getContentPane().add(drawpanel, java.awt.BorderLayout.CENTER);

        buttonpanel.setLayout(new java.awt.GridLayout());

        minlabel.setText("min attval");
        buttonpanel.add(minlabel);

        mintextfield.setText("0");
        mintextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mintextfieldActionPerformed(evt);
            }
        });

        buttonpanel.add(mintextfield);

        maxlabel.setText("max attval");
        buttonpanel.add(maxlabel);

        maxtextfield.setText("1");
        maxtextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxtextfieldActionPerformed(evt);
            }
        });

        buttonpanel.add(maxtextfield);

        getContentPane().add(buttonpanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void maxtextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxtextfieldActionPerformed
        // TODO add your handling code here:
        try{
            maxattval=Double.parseDouble(maxtextfield.getText());
            if(Double.isNaN(maxattval)||Double.isInfinite(maxattval)||(maxattval==0)){
                System.err.println("Unable to parse double from "+maxtextfield.getText()+" value too small/large?");
                maxattval=1;
            }
        }catch (NumberFormatException e){
            System.err.println("unable to parse double from "+maxtextfield.getText());
        }
        draw1.vals=makedata();
        repaint();
    }//GEN-LAST:event_maxtextfieldActionPerformed

    private void mintextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mintextfieldActionPerformed
        // TODO add your handling code here:
        try{
            minattval=Double.parseDouble(mintextfield.getText());
            if(Double.isNaN(minattval)||Double.isInfinite(minattval)||(minattval==0)){
                System.err.println("Unable to parse double from "+mintextfield.getText()+" value too small/large?");
                minattval=1e-200;
            }
        }catch (NumberFormatException e){
            System.err.println("unable to parse double from "+mintextfield.getText());
        }
        draw1.vals=makedata();
        repaint();
    }//GEN-LAST:event_mintextfieldActionPerformed

    private void drawpanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawpanelMousePressed
        // Add your handling code here:
        mousex=evt.getX();
        drawmouse=true;
        repaint();
    }//GEN-LAST:event_drawpanelMousePressed

    private void drawpanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawpanelMouseDragged
        // Add your handling code here:
        mousex=evt.getX();
        drawmouse=true;
        repaint();
    }//GEN-LAST:event_drawpanelMouseDragged

    private void drawpanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawpanelMouseReleased
        // Add your handling code here:
        drawmouse=false;
        repaint();
    }//GEN-LAST:event_drawpanelMouseReleased

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        // Add your handling code here:
        repaint();
    }//GEN-LAST:event_formAncestorResized
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    
    minattvals[] attvals;
    double minattval=0,maxattval=1;
    drawclass draw1;
    boolean drawmouse=false;
    int mousex=0;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonpanel;
    private javax.swing.JPanel drawpanel;
    private javax.swing.JLabel maxlabel;
    private javax.swing.JTextField maxtextfield;
    private javax.swing.JLabel minlabel;
    private javax.swing.JTextField mintextfield;
    // End of variables declaration//GEN-END:variables
    
    public float[] makedata(){
        //bin the attraction values
        //attvals are numbers from 0 to maxval
        int elements=1000;
        int seqnum=java.lang.reflect.Array.getLength(attvals);
        float[] retarr=new float[elements+1];
        for(int i=0;i<elements+1;i++){
            retarr[i]=0;
        }
        float scale=1;
        int i,j;
        float maxval=1;
        for(i=0;i<seqnum;i++){
            if(attvals[i].att>maxval){
                maxval=attvals[i].att;
            }
        }//end for i
        if(maxval>maxattval){
            maxval=(float)maxattval;
        }
        draw1.maxxval=maxval;
        //System.out.println("maxval="+maxval);
        int pos;
        for(i=0;i<seqnum;i++){
            if(attvals[i].att>0){
                pos=(int)(((attvals[i].att-minattval)/(maxval-minattval))*elements);
                if((pos<=elements)&&(pos>=0)){
                    retarr[pos]++;
                }
            }
        }//end for i
        //now sum the elements
        float oldval=0;
        for(i=0;i<elements+1;i++){
            retarr[i]+=oldval;
            oldval=retarr[i];
        }//end for i
        draw1.maxval=retarr[elements];
        for(i=0;i<elements+1;i++){
            retarr[i]=retarr[i]/retarr[elements];
        }//end for i
        draw1.elements=elements;
        return retarr;
    }//end makedata
    
    //--------------------------------------------------------------------------
    
    class drawclass extends javax.swing.JPanel{
        
        public drawclass(){
        }
        
        int xoffset=20;
        int yoffset=20;
        float[] vals=new float[0];//values ranging from 0 to 1
        float maxval=1;
        float maxxval=1;
        int elements=0;//number of values in vals
        
        public void paintComponent(java.awt.Graphics g){
            super.paintComponent(g);
            int drawwidth=drawpanel.getWidth()-2*xoffset;
            int drawheight=drawpanel.getHeight()-2*yoffset;
            g.setColor(java.awt.Color.white);
            g.fillRect(0,0,drawpanel.getWidth(),drawpanel.getHeight());
            float linewidth= (float)drawwidth/(float)elements;
            g.setColor(java.awt.Color.red);
            g.drawString("Y-axis:# of connections above attraction value; X-axis:attraction value * 1000",xoffset,15);
            g.drawString(String.valueOf(maxval),0,30);
            int spacer=elements/10;
            float scale=1;
            g.drawString(String.valueOf(-(int)(0*scale)),(int)((0*linewidth)),drawheight+2*yoffset);
            for(int i=1;i<elements;i++){
                g.drawLine((int)((i*linewidth)+xoffset), (int)(yoffset+drawheight-vals[i]*drawheight), (int)((i+1)*linewidth+xoffset), (int)(yoffset+drawheight-vals[i+1]*drawheight));
                if(i%spacer==0){
                    g.drawLine((int)((i*linewidth)+xoffset), drawheight+yoffset, (int)((i*linewidth)+xoffset), drawheight+yoffset+5);
                    g.drawString(String.valueOf((int)(i*maxxval*scale+minattval)),(int)((i*linewidth)),drawheight+2*yoffset);
                }
            }
            g.drawLine((int)((elements*linewidth)+xoffset), drawheight+yoffset, (int)((elements*linewidth)+xoffset), drawheight+yoffset+5);
            g.drawString(String.valueOf((int)(elements*maxxval*scale+minattval)),(int)((elements*linewidth)),drawheight+2*yoffset);
            if(drawmouse){
                g.setColor(java.awt.Color.blue);
                g.drawLine(mousex, yoffset,  mousex,  drawheight+yoffset);
                float currelement=((mousex-xoffset)/linewidth);
                g.drawString(String.valueOf((int)(currelement*maxxval*scale)),xoffset,drawheight);
            }//end if drawmouse
            g.setColor(java.awt.Color.black);
            g.drawLine(xoffset, yoffset, xoffset, yoffset+drawheight);
            g.drawLine(xoffset, drawheight+yoffset, xoffset+drawwidth, drawheight+yoffset);
        }// end paintcomponent
        
    }//end drawclass
    
}//end class
